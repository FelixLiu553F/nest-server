generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String   @id @db.VarChar(40)
  mobilePhoneNumber   String?  @unique @db.VarChar(20)
  username            String   @unique @db.VarChar(50)
  mobilePhoneVerified Boolean  @default(false)
  nickname            String?  @db.VarChar(30)
  password            String?  @db.VarChar(40)
  avatar              String?  @db.Text
  email               String?  @db.VarChar(255)
  emailVerified       Boolean  @default(false)
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt

  socialInfo   UserSocialInfo[]
  LoginHistory LoginHistory[]
  userRoles    UserRole[]
}

model UserSocialInfo {
  id           String  @id @db.VarChar(40)
  openId       String  @db.VarChar(40)
  nickname     String? @db.VarChar(30)
  avatar       String? @db.VarChar(255)
  userId       String  @db.VarChar(40)
  provider     String  @db.VarChar(20)
  accessToken  String  @db.VarChar(255)
  refreshToken String  @db.VarChar(255)
  expiresIn    Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model LoginHistory {
  id        String  @id @db.VarChar(40)
  method    String  @db.VarChar(20)
  userId    String  @db.VarChar(40)
  ip        String? @db.VarChar(20)
  userAgent String? @db.VarChar(255)
  device    String? @db.VarChar(20)
  os        String? @db.VarChar(20)
  browser   String? @db.VarChar(20)
  country   String? @db.VarChar(20)
  region    String? @db.VarChar(20)
  city      String? @db.VarChar(20)

  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model UserRole {
  id     String @id @db.VarChar(40)
  userId String @db.VarChar(40)

  type UserRoleType

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum UserRoleType {
  SystemAdmin
  Admin
}
